(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{210:function(t,i,n){"use strict";n.r(i);var r=n(0),e=Object(r.a)({},(function(){var t=this,i=t.$createElement,n=t._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"git使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git使用","aria-hidden":"true"}},[t._v("#")]),t._v(" git使用")]),t._v(" "),n("h2",{attrs:{id:"项目下载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目下载","aria-hidden":"true"}},[t._v("#")]),t._v(" 项目下载")]),t._v(" "),n("p",[t._v("clone 远程工程：git clone https://XXXX.git"),n("br"),t._v("\nfetch 远程分支到本地某分支：git fetch origin")]),t._v(" "),n("h3",{attrs:{id:"分支的增删查改"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分支的增删查改","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支的增删查改")]),t._v(" "),n("p",[t._v("查看分支：git branch"),n("br"),t._v("\n查看远程所有分支：git branch -r"),n("br"),t._v("\n查看本地和远程所有分支：git branch -a"),n("br"),t._v("\n创建分支：git branch"),n("br"),t._v("\n切换分支：git checkout"),n("br"),t._v("\n创建并切换分支：git checkout -b"),n("br"),t._v("\n合并某分支到当前分支：git merge"),n("br"),t._v("\n把分支推送到远程：git push origin"),n("br"),t._v("\n删除本地分支：git branch (-d | -D)"),n("br"),t._v("\n删除远程分支：git push origin -d"),n("br"),t._v("\n分支重命名：git branch (-m | -M)")]),t._v(" "),n("h3",{attrs:{id:"查看提交信息日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看提交信息日志","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看提交信息日志")]),t._v(" "),n("p",[t._v("查看分支最近一次的修改列表：git status"),n("br"),t._v("\n查看分支的commit信息(倒叙排列)"),n("br"),t._v("\ngit log 查看commit id, Author, Date, commit info"),n("br"),t._v("\ngit shortlog 按提交者分类显示提交信息"),n("br"),t._v("\ngit log --oneline 只输出commit id 和 commit info"),n("br"),t._v("\ngit log --stat 查看增删查改了哪些文件")]),t._v(" "),n("h3",{attrs:{id:"版本回退"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#版本回退","aria-hidden":"true"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),n("p",[t._v('回退到上一版本：git reset --hard HEAD^\n回退到上上版本：git reset --hard HEAD^^\n回退到上上版本：git reset --hard HEAD~2\n回退到某个版本：git reset --hard\n强制推送到远程分支：git push -f\n注意：\n1、HEAD 指向的版本是当前版本，^ 表示上一个版本，~N 表示上N个版本，可简写\n2、git log 可以查看\n3、git reflog 可以查看命令历史，用来回到某个未来的版本\n文件的添加、提交、拉取、推送、比对、合并\n添加新增文件：git add README.md\n添加所有新增文件：git add .\n暂存变更文件：git stash [save "暂存备注"]\n恢复暂存文件：git stash pop\n提交变更文件：git commit -m "变更备注"\n拉取远程代码：git pull [origin\n]\n推送到远程：git push origin\n比对两个分支：git diff\n比对两个分支变更的文件列表：git diff\n--stat\n比对本地和远程分支：git diff\norigin/\n合并某个分支：git merge\n强制覆盖本地分支：\n1、git fetch --all\n2、git reset --hard origin/')]),t._v(" "),n("p",[t._v("3、git pull\n常用选项和其他命令\ngit 中部分选项解释\n-f --force：强制\n-d --delete：删除\n-D --delete --force\n-m --move：移动或重命名\n-M --move --force\n-r --remote：远程\n-a --all：所有\n其他命令\n清空工程：\n$ git rm -rf\n每隔X秒运行一次git pull：\nfor((i=1;i<=10000;i+=1)); do sleep X && git pull; done\n使用git rebase将一个feature分支变基到master分支\n$ git checkout feature\n$ git rebase master\n配置相关\n查看当前配置： git config --list\n修改 git 的 name 和 email ：\ngit config --global user.name "),n("name",[t._v("\ngit config --global user.email "),n("email")],1)],1),t._v(" "),n("p",[t._v("今天不小心删除了本地的store文件夹\nStep 1： git status查看自己做了什么操作")]),t._v(" "),n("p",[t._v("Step 2： git reset HEAD [ 被删除的文件或文件夹 ]")]),t._v(" "),n("p",[t._v("Step 3：git checkout  [ 被删除的文件或文件夹 ]")]),t._v(" "),n("p",[t._v("至此，查看文件已恢复！")])])}),[],!1,null,null,null);i.default=e.exports}}]);